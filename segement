CREATE TABLE customer_fraud_segments AS
WITH 
-- Step 1: Extract the first digit from transaction amounts
first_digit_data AS (
    SELECT 
        customer_id,
        transaction_id,
        transaction_amount,
        CAST(SUBSTRING(CAST(transaction_amount AS STRING), 1, 1) AS INT) AS first_digit
    FROM 
        debit_card_transactions
    WHERE 
        transaction_amount > 0
),

-- Step 2: Calculate observed first digit distribution for each customer
observed_distribution AS (
    SELECT 
        customer_id,
        first_digit,
        COUNT(*) AS observed_count
    FROM 
        first_digit_data
    GROUP BY 
        customer_id, first_digit
),
benford_distribution AS (
    SELECT 1 AS first_digit, 0.3010 AS expected_probability
    UNION ALL
    SELECT 2 AS first_digit, 0.1761 AS expected_probability
    UNION ALL
    SELECT 3 AS first_digit, 0.1249 AS expected_probability
    UNION ALL
    SELECT 4 AS first_digit, 0.0969 AS expected_probability
    UNION ALL
    SELECT 5 AS first_digit, 0.0792 AS expected_probability
    UNION ALL
    SELECT 6 AS first_digit, 0.0669 AS expected_probability
    UNION ALL
    SELECT 7 AS first_digit, 0.0580 AS expected_probability
    UNION ALL
    SELECT 8 AS first_digit, 0.0512 AS expected_probability
    UNION ALL
    SELECT 9 AS first_digit, 0.0458 AS expected_probability
),

-- Step 4: Join observed and expected distributions and calculate chi-square for each customer
chi_square_calc AS (
    SELECT 
        o.customer_id,
        o.first_digit,
        o.observed_count,
        (o.observed_count / SUM(o.observed_count) OVER (PARTITION BY o.customer_id)) AS observed_probability,
        b.expected_probability,
        (POW((o.observed_probability - b.expected_probability), 2) / b.expected_probability) AS chi_square_contrib
    FROM 
        observed_distribution o
    JOIN 
        benford_distribution b
    ON 
        o.first_digit = b.first_digit
),

-- Step 5: Summarize chi-square for each customer
customer_chi_square AS (
    SELECT 
        customer_id,
        SUM(chi_square_contrib) AS total_chi_square
    FROM 
        chi_square_calc
    GROUP BY 
        customer_id
),

-- Step 6: CLT statistics with dynamic confidence intervals
customer_stats AS (
    SELECT 
        customer_id,
        AVG(transaction_amount) AS avg_amount,
        STDDEV(transaction_amount) AS stddev_amount,
        COUNT(*) AS total_transactions,
        -- Dynamic confidence intervals
        AVG(transaction_amount) - 1.96 * STDDEV(transaction_amount) AS lower_ci,
        AVG(transaction_amount) + 1.96 * STDDEV(transaction_amount) AS upper_ci,
        SUM(CASE 
            WHEN transaction_amount < (AVG(transaction_amount) - 1.96 * STDDEV(transaction_amount)) OR 
                 transaction_amount > (AVG(transaction_amount) + 1.96 * STDDEV(transaction_amount))
            THEN 1 ELSE 0 END) AS anomalous_transactions
    FROM 
        debit_card_transactions
    GROUP BY 
        customer_id
),

-- Step 7: Combine chi-square and confidence interval results for segmentation
final_segmentation AS (
    SELECT 
        c.customer_id,
        c.total_chi_square,
        s.avg_amount,
        s.stddev_amount,
        s.total_transactions,
        s.anomalous_transactions,
        s.lower_ci,
        s.upper_ci,
        (s.anomalous_transactions * 1.0 / s.total_transactions) AS anomaly_rate,
        CASE 
            WHEN c.total_chi_square < 5 AND (s.anomalous_transactions * 1.0 / s.total_transactions) < 0.05 THEN 'Highly Consistent'
            WHEN c.total_chi_square BETWEEN 5 AND 10 OR (s.anomalous_transactions * 1.0 / s.total_transactions) BETWEEN 0.05 AND 0.2 THEN 'Moderately Consistent'
            ELSE 'Inconsistent'
        END AS segment
    FROM 
        customer_chi_square c
    JOIN 
        customer_stats s
    ON 
        c.customer_id = s.customer_id
)

-- Step 8: Create the final table
SELECT 
    customer_id,
    total_chi_square,
    avg_amount,
    stddev_amount,
    total_transactions,
    anomalous_transactions,
    lower_ci,
    upper_ci,
    anomaly_rate,
    segment
FROM 
    final_segmentation;
