-- Step 1: Compute observed distribution of first digits from transaction amounts
WITH observed_distribution AS (
    SELECT 
        customer_id,
        CAST(SUBSTR(CAST(transaction_amount AS STRING), 1, 1) AS INT) AS first_digit,
        COUNT(*) AS observed_count
    FROM 
        transactions
    WHERE 
        transaction_amount > 0 -- Ensure valid positive transaction amounts
    GROUP BY 
        customer_id, CAST(SUBSTR(CAST(transaction_amount AS STRING), 1, 1) AS INT)
),

-- Step 2: Hardcoded expected Benford distribution
benford_distribution AS (
    SELECT 1 AS first_digit, 0.3010 AS expected_probability UNION ALL
    SELECT 2 AS first_digit, 0.1761 AS expected_probability UNION ALL
    SELECT 3 AS first_digit, 0.1249 AS expected_probability UNION ALL
    SELECT 4 AS first_digit, 0.0969 AS expected_probability UNION ALL
    SELECT 5 AS first_digit, 0.0792 AS expected_probability UNION ALL
    SELECT 6 AS first_digit, 0.0669 AS expected_probability UNION ALL
    SELECT 7 AS first_digit, 0.0580 AS expected_probability UNION ALL
    SELECT 8 AS first_digit, 0.0512 AS expected_probability UNION ALL
    SELECT 9 AS first_digit, 0.0458 AS expected_probability
),

-- Step 3: Calculate Chi-Square contributions for each customer
chi_square_calc AS (
    SELECT 
        o.customer_id,
        o.first_digit,
        o.observed_count,
        (o.observed_count * 1.0 / SUM(o.observed_count) OVER (PARTITION BY o.customer_id)) AS observed_probability,
        b.expected_probability,
        (POW(((o.observed_count * 1.0 / SUM(o.observed_count) OVER (PARTITION BY o.customer_id)) - b.expected_probability), 2) 
         / b.expected_probability) AS chi_square_contrib
    FROM 
        observed_distribution o
    JOIN 
        benford_distribution b
    ON 
        o.first_digit = b.first_digit
),

-- Step 4: Aggregate Chi-Square statistic for each customer
chi_square_summary AS (
    SELECT 
        customer_id,
        SUM(chi_square_contrib) AS total_chi_square
    FROM 
        chi_square_calc
    GROUP BY 
        customer_id
),

-- Step 5: Compute mean and standard deviation for transaction amounts per customer
stats AS (
    SELECT 
        customer_id,
        AVG(transaction_amount) AS mean_transaction_amount,
        STDDEV(transaction_amount) AS stddev_transaction_amount
    FROM 
        transactions
    GROUP BY 
        customer_id
),

-- Step 6: Flag transactions as outliers based on CLT confidence intervals
flagged_transactions AS (
    SELECT 
        t.customer_id,
        t.transaction_id,
        t.transaction_amount,
        s.mean_transaction_amount,
        s.stddev_transaction_amount,
        CASE 
            WHEN t.transaction_amount < (s.mean_transaction_amount - 1.96 * s.stddev_transaction_amount) OR 
                 t.transaction_amount > (s.mean_transaction_amount + 1.96 * s.stddev_transaction_amount)
            THEN 'Outlier'
            ELSE 'Normal'
        END AS anomaly_flag
    FROM 
        transactions t
    JOIN 
        stats s
    ON 
        t.customer_id = s.customer_id
),

-- Step 7: Final profiling combining Chi-Square and CLT results
customer_profiling AS (
    SELECT 
        f.customer_id,
        f.transaction_id,
        f.transaction_amount,
        f.anomaly_flag,
        c.total_chi_square,
        CASE 
            WHEN c.total_chi_square < 5 AND f.anomaly_flag = 'Normal' THEN 'Highly Consistent'
            WHEN c.total_chi_square BETWEEN 5 AND 10 OR f.anomaly_flag = 'Outlier' THEN 'Moderately Consistent'
            ELSE 'Inconsistent'
        END AS customer_segment
    FROM 
        flagged_transactions f
    JOIN 
        chi_square_summary c
    ON 
        f.customer_id = c.customer_id
)

-- Final output: Customer profiling table
SELECT 
    customer_id,
    transaction_id,
    transaction_amount,
    anomaly_flag,
    total_chi_square,
    customer_segment
FROM 
    customer_profiling;
